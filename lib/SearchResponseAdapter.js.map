{"version":3,"file":"SearchResponseAdapter.js","names":["_typeof","_slicedToArray","_toConsumableArray","_defineProperty","_classCallCheck","_createClass","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","utils","SearchResponseAdapter","typesenseResponse","instantsearchRequest","configuration","allTypesenseResults","undefined","fullTypesenseResponse","key","value","_adaptGroupedHits","typesenseGroupedHits","_this","adaptedResult","map","groupedHit","adaptedHits","_adaptHits","hits","hit","group_key","found","flattenGroupedHits","flat","adaptedGroupedHit","_grouped_hits","typesenseHits","_this2","typesenseHit","adaptedHit","document","objectID","id","_snippetResult","_adaptHighlightResult","_highlightResult","_rawTypesenseHit","conversation","_rawTypesenseConversation","metadataField","includes","geoLocationValue","geoLocationField","_geoloc","lat","lng","snippetOrValue","result","highlight","isHighlightPost0240RCN32Format","adaptHighlightObject","adaptHighlightsArray","full","snippet","_this3","assign","concat","entries","_ref","_ref2","attribute","matchLevel","matchedWords","highlights","field","matched_tokens","indices","_ref4","_ref5","k","v","matchedIndices","_adaptHighlightNullValue","Array","isArray","unhighlightedValueFromArray","index","_adaptHighlightTag","indexOf","params","highlightPreTag","highlightPostTag","_adaptHighlightInObjectValue","objectValue","highlightObjectValue","_this4","_ref6","_ref7","adaptedValue","_highlightObjectValue","_adaptHighlightInArrayValue","_highlightObjectValue2","_adaptHighlightInPrimitiveValue","arrayValue","highlightArrayValue","_this5","_highlightArrayValue$","_highlightArrayValue$2","primitiveValue","highlightPrimitiveValue","_ref9","_highlightPrimitiveVa","_adaptFacets","typesenseFacetCounts","facet","field_name","counts","count","_adaptFacetStats","stats","_adaptRenderingContent","_adaptedResult$facetO","renderingContent","facetOrdering","facets","order","Set","fc","facet_counts","f","_adaptUserData","metadata","adapt","adaptedRenderingContent","requestParams","union_request_params","request_params","grouped_hits","nbHits","page","nbPages","_adaptNumberOfPages","hitsPerPage","per_page","facets_stats","query","q","processingTimeMS","search_time_ms","appliedRules","userData","parsed_nl_query","prototype"],"sources":["../src/SearchResponseAdapter.js"],"sourcesContent":["\"use strict\";\n\nimport { utils } from \"./support/utils\";\n\nexport class SearchResponseAdapter {\n  constructor(\n    typesenseResponse,\n    instantsearchRequest,\n    configuration,\n    allTypesenseResults = [],\n    fullTypesenseResponse = {},\n  ) {\n    this.typesenseResponse = typesenseResponse;\n    this.instantsearchRequest = instantsearchRequest;\n    this.configuration = configuration;\n    this.allTypesenseResults = allTypesenseResults;\n    this.fullTypesenseResponse = fullTypesenseResponse;\n  }\n\n  _adaptGroupedHits(typesenseGroupedHits) {\n    let adaptedResult = [];\n\n    adaptedResult = typesenseGroupedHits.map((groupedHit) => {\n      const adaptedHits = this._adaptHits(groupedHit.hits);\n      adaptedHits.forEach((hit) => {\n        hit[\"group_key\"] = hit[\"_group_key\"] = groupedHit.group_key;\n        if (groupedHit.found) {\n          hit[\"_group_found\"] = groupedHit.found;\n        }\n      });\n      return adaptedHits;\n    });\n\n    // adaptedResult is now in the form of [[{}, {}], [{}, {}], ...]\n    //  where each element in the outermost array corresponds to a group.\n\n    if (this.configuration.flattenGroupedHits) {\n      // We flatten it to [{}, {}, {}]\n      adaptedResult = adaptedResult.flat();\n    } else {\n      // We flatten it to [{ ..., grouped_hits: [{}, {}] }, {}, {}]\n      // We set the first element in the group as the hit, and then add a new key called grouped_hits with the other hits\n      adaptedResult = adaptedResult.map((adaptedGroupedHit) => {\n        return {\n          ...adaptedGroupedHit[0],\n          _grouped_hits: adaptedGroupedHit,\n        };\n      });\n    }\n\n    return adaptedResult;\n  }\n\n  _adaptHits(typesenseHits) {\n    let adaptedResult = [];\n    adaptedResult = typesenseHits.map((typesenseHit) => {\n      const adaptedHit = {\n        ...typesenseHit.document,\n      };\n      adaptedHit.objectID = typesenseHit.document.id;\n      adaptedHit._snippetResult = this._adaptHighlightResult(typesenseHit, \"snippet\");\n      adaptedHit._highlightResult = this._adaptHighlightResult(typesenseHit, \"value\");\n      adaptedHit._rawTypesenseHit = typesenseHit;\n\n      // We're adding `conversation` into each hit, since there doesn't seem to be any other way to pass this up to Instantsearch outside of hits\n      if (this.fullTypesenseResponse.conversation) {\n        adaptedHit._rawTypesenseConversation = this.fullTypesenseResponse.conversation;\n      }\n\n      // Add metadata fields to result, if a field with that name doesn't already exist\n      [\n        \"text_match\",\n        \"geo_distance_meters\",\n        \"curated\",\n        \"text_match_info\",\n        \"hybrid_search_info\",\n        \"vector_distance\",\n        \"collection\", // Union search specific\n        \"search_index\", // Union search specific\n      ].forEach((metadataField) => {\n        if (Object.keys(typesenseHit).includes(metadataField) && !Object.keys(adaptedHit).includes(metadataField)) {\n          adaptedHit[metadataField] = typesenseHit[metadataField];\n        }\n      });\n\n      const geoLocationValue = adaptedHit[this.configuration.geoLocationField];\n      if (geoLocationValue) {\n        adaptedHit._geoloc = {\n          lat: geoLocationValue[0],\n          lng: geoLocationValue[1],\n        };\n      }\n\n      return adaptedHit;\n    });\n    return adaptedResult;\n  }\n\n  _adaptHighlightResult(typesenseHit, snippetOrValue) {\n    const result = {};\n\n    // If there is a highlight object available (as of v0.24.0),\n    // And the highlight object uses the highlight format available in v0.24.0.rcn32 and above\n    //  use that instead of the highlights array, since it supports highlights of nested fields\n    if (typesenseHit.highlight != null && this.isHighlightPost0240RCN32Format(typesenseHit.highlight)) {\n      this.adaptHighlightObject(typesenseHit, result, snippetOrValue);\n    } else {\n      this.adaptHighlightsArray(typesenseHit, result, snippetOrValue);\n    }\n    return result;\n  }\n\n  isHighlightPost0240RCN32Format(highlight) {\n    return highlight.full == null && highlight.snippet == null;\n  }\n\n  adaptHighlightsArray(typesenseHit, result, snippetOrValue) {\n    // Algolia lists all searchable attributes in this key, even if there are no matches\n    // So do the same and then override highlights\n\n    Object.assign(\n      result,\n      ...Object.entries(typesenseHit.document).map(([attribute, value]) => ({\n        [attribute]: {\n          value: value,\n          matchLevel: \"none\",\n          matchedWords: [],\n        },\n      })),\n    );\n\n    typesenseHit.highlights.forEach((highlight) => {\n      result[highlight.field] = {\n        value: highlight[snippetOrValue] || highlight[`${snippetOrValue}s`],\n        matchLevel: \"full\",\n        matchedWords: highlight.matched_tokens,\n      };\n\n      if (highlight.indices) {\n        result[highlight.field][\"matchedIndices\"] = highlight.indices;\n      }\n    });\n\n    // Now convert any values that have an array value\n    // Also, replace highlight tag\n    Object.entries(result).forEach(([k, v]) => {\n      const attribute = k;\n      const { value, matchLevel, matchedWords, matchedIndices } = v;\n      if (value == null) {\n        result[attribute] = this._adaptHighlightNullValue();\n      } else if (Array.isArray(value)) {\n        // Algolia lists all values of the key in highlights, even those that don't have any highlights\n        // So add all values of the array field, including highlights\n        result[attribute] = [];\n        typesenseHit.document[attribute].forEach((unhighlightedValueFromArray, index) => {\n          if (matchedIndices && matchedIndices.includes(index)) {\n            result[attribute].push({\n              value: this._adaptHighlightTag(\n                `${value[matchedIndices.indexOf(index)]}`,\n                this.instantsearchRequest.params.highlightPreTag,\n                this.instantsearchRequest.params.highlightPostTag,\n              ),\n              matchLevel: matchLevel,\n              matchedWords: matchedWords[index],\n            });\n          } else if (typeof unhighlightedValueFromArray === \"object\") {\n            // Handle arrays of objects\n            // Side note: Typesense does not support highlights for nested objects in this `highlights` array,\n            //  so we pass in an empty object below\n            result[attribute].push(this._adaptHighlightInObjectValue(unhighlightedValueFromArray, {}, snippetOrValue));\n          } else {\n            result[attribute].push({\n              value: `${unhighlightedValueFromArray}`,\n              matchLevel: \"none\",\n              matchedWords: [],\n            });\n          }\n        });\n      } else if (typeof value === \"object\") {\n        // Handle nested objects\n        // Side note: Typesense does not support highlights for nested objects in this `highlights` array,\n        //  so we pass in an empty object below\n        result[attribute] = this._adaptHighlightInObjectValue(value, {}, snippetOrValue);\n      } else {\n        // Convert all values to strings\n        result[attribute].value = this._adaptHighlightTag(\n          `${value}`,\n          this.instantsearchRequest.params.highlightPreTag,\n          this.instantsearchRequest.params.highlightPostTag,\n        );\n      }\n    });\n  }\n\n  adaptHighlightObject(typesenseHit, result, snippetOrValue) {\n    Object.assign(\n      result,\n      this._adaptHighlightInObjectValue(typesenseHit.document, typesenseHit.highlight, snippetOrValue),\n    );\n  }\n\n  _adaptHighlightInObjectValue(objectValue, highlightObjectValue, snippetOrValue) {\n    return Object.assign(\n      {},\n      ...Object.entries(objectValue).map(([attribute, value]) => {\n        let adaptedValue;\n        if (value == null) {\n          adaptedValue = this._adaptHighlightNullValue();\n        } else if (Array.isArray(value)) {\n          adaptedValue = this._adaptHighlightInArrayValue(\n            value,\n            highlightObjectValue?.[attribute] ?? [],\n            snippetOrValue,\n          );\n        } else if (typeof value === \"object\") {\n          adaptedValue = this._adaptHighlightInObjectValue(\n            value,\n            highlightObjectValue?.[attribute] ?? {},\n            snippetOrValue,\n          );\n        } else {\n          adaptedValue = this._adaptHighlightInPrimitiveValue(value, highlightObjectValue?.[attribute], snippetOrValue);\n        }\n\n        return {\n          [attribute]: adaptedValue,\n        };\n      }),\n    );\n  }\n\n  _adaptHighlightInArrayValue(arrayValue, highlightArrayValue, snippetOrValue) {\n    return arrayValue.map((value, index) => {\n      let adaptedValue;\n      if (value == null) {\n        adaptedValue = this._adaptHighlightNullValue();\n      } else if (Array.isArray(value)) {\n        adaptedValue = this._adaptHighlightInArrayValue(value, highlightArrayValue?.[index] ?? [], snippetOrValue);\n      } else if (typeof value === \"object\") {\n        adaptedValue = this._adaptHighlightInObjectValue(value, highlightArrayValue?.[index] ?? {}, snippetOrValue);\n      } else {\n        adaptedValue = this._adaptHighlightInPrimitiveValue(value, highlightArrayValue?.[index], snippetOrValue);\n      }\n      return adaptedValue;\n    });\n  }\n\n  _adaptHighlightInPrimitiveValue(primitiveValue, highlightPrimitiveValue, snippetOrValue) {\n    if (highlightPrimitiveValue != null) {\n      return {\n        value: this._adaptHighlightTag(\n          `${\n            highlightPrimitiveValue[snippetOrValue] ??\n            highlightPrimitiveValue[\"highlight\"] ??\n            highlightPrimitiveValue[\"snippet\"]\n          }`,\n          this.instantsearchRequest.params.highlightPreTag,\n          this.instantsearchRequest.params.highlightPostTag,\n        ),\n        matchLevel: (highlightPrimitiveValue.matched_tokens || []).length > 0 ? \"full\" : \"none\",\n        matchedWords: highlightPrimitiveValue.matched_tokens || [],\n      };\n    } else {\n      return {\n        // Convert all values to strings\n        value: this._adaptHighlightTag(\n          `${primitiveValue}`,\n          this.instantsearchRequest.params.highlightPreTag,\n          this.instantsearchRequest.params.highlightPostTag,\n        ),\n        matchLevel: \"none\",\n        matchedWords: [],\n      };\n    }\n  }\n\n  _adaptHighlightNullValue() {\n    return {\n      value: \"\",\n      matchLevel: \"none\",\n      matchedWords: [],\n    };\n  }\n\n  _adaptFacets(typesenseFacetCounts) {\n    const adaptedResult = {};\n    if (Array.isArray(typesenseFacetCounts)) {\n      typesenseFacetCounts.forEach((facet) => {\n        Object.assign(adaptedResult, {\n          [facet.field_name]: Object.assign({}, ...facet.counts.map((count) => ({ [count.value]: count.count }))),\n        });\n      });\n    }\n    return adaptedResult;\n  }\n\n  _adaptFacetStats(typesenseFacetCounts) {\n    const adaptedResult = {};\n    if (Array.isArray(typesenseFacetCounts)) {\n      typesenseFacetCounts.forEach((facet) => {\n        if (facet.stats && Object.keys(facet.stats).length > 0) {\n          Object.assign(adaptedResult, {\n            [facet.field_name]: facet.stats,\n          });\n        }\n      });\n    }\n    return adaptedResult;\n  }\n\n  _adaptRenderingContent(typesenseFacetCounts) {\n    const adaptedResult = Object.assign({}, this.configuration.renderingContent);\n\n    // Only set facet ordering if the user has not set one\n    if (adaptedResult.facetOrdering?.facets?.order == null) {\n      adaptedResult.facetOrdering = adaptedResult.facetOrdering || {};\n      adaptedResult.facetOrdering.facets = adaptedResult.facetOrdering.facets || {};\n      adaptedResult.facetOrdering.facets.order = [\n        ...new Set(\n          (Array.isArray(typesenseFacetCounts) ? typesenseFacetCounts : [])\n            .map((fc) => fc[\"field_name\"])\n            .concat(\n              this.allTypesenseResults\n                .map((r) => r.facet_counts || [])\n                .flat()\n                .map((fc) => fc[\"field_name\"])\n                .filter((f) => f),\n            ),\n        ),\n      ];\n    }\n\n    return adaptedResult;\n  }\n\n  _adaptUserData(metadata) {\n    if (!metadata) return [];\n\n    return Array.isArray(metadata) ? metadata : [metadata];\n  }\n\n  adapt() {\n    const adaptedRenderingContent = this._adaptRenderingContent(this.typesenseResponse.facet_counts || []);\n\n    // For union search, use union_request_params, otherwise use request_params\n    const requestParams = this.typesenseResponse.union_request_params\n      ? this.typesenseResponse.union_request_params[0]\n      : this.typesenseResponse.request_params;\n\n    const adaptedResult = {\n      hits: this.typesenseResponse.grouped_hits\n        ? this._adaptGroupedHits(this.typesenseResponse.grouped_hits)\n        : this._adaptHits(this.typesenseResponse.hits),\n      nbHits: this.typesenseResponse.found,\n      page: this.typesenseResponse.union_request_params\n        ? this.typesenseResponse.page // Union search already uses 0-based page\n        : this.typesenseResponse.page - 1, // Regular search uses 1-based page, convert to 0-based\n      nbPages: this._adaptNumberOfPages(),\n      hitsPerPage: requestParams?.per_page || 10,\n      facets: this._adaptFacets(this.typesenseResponse.facet_counts || []),\n      facets_stats: this._adaptFacetStats(this.typesenseResponse.facet_counts || []),\n      query: requestParams?.q || \"\",\n      processingTimeMS: this.typesenseResponse.search_time_ms,\n      ...(Object.keys(adaptedRenderingContent).length > 0 ? { renderingContent: adaptedRenderingContent } : null),\n    };\n\n    // Add appliedRules if metadata is present\n    if (this.typesenseResponse.metadata) {\n      adaptedResult.appliedRules = [\"typesense-override\"];\n      adaptedResult.userData = this._adaptUserData(this.typesenseResponse.metadata);\n    }\n\n    // Add parsed_nl_query if natural language search was used\n    if (this.typesenseResponse.parsed_nl_query) {\n      adaptedResult.parsed_nl_query = this.typesenseResponse.parsed_nl_query;\n    }\n\n    // If no results were found for the search, but there is still a conversation response,\n    // still send that as a hit so the conversation is accessible via Instantsearch\n    if (this.fullTypesenseResponse.conversation && adaptedResult.hits.length === 0) {\n      adaptedResult.hits = [\n        {\n          _rawTypesenseConversation: this.fullTypesenseResponse.conversation,\n        },\n      ];\n    }\n\n    // console.log(adaptedResult);\n    return adaptedResult;\n  }\n}\n\nObject.assign(SearchResponseAdapter.prototype, utils);\n"],"mappings":"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","ignoreList":[]}