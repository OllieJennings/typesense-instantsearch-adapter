{"version":3,"sources":["../src/SearchResponseAdapter.js"],"names":["SearchResponseAdapter","typesenseResponse","instantsearchRequest","configuration","typesenseGroupedHits","adaptedResult","map","groupedHit","adaptedHits","_adaptHits","hits","forEach","hit","group_key","flat","typesenseHits","typesenseHit","adaptedHit","document","objectID","id","_snippetResult","_adaptHighlightResult","_highlightResult","_rawTypesenseHit","metadataField","Object","keys","includes","geoLocationValue","geoLocationField","_geoloc","lat","lng","snippetOrValue","result","highlight","isHighlightPost0240RCN32Format","adaptHighlightObject","adaptHighlightsArray","full","snippet","assign","entries","attribute","value","matchLevel","matchedWords","highlights","field","matched_tokens","indices","k","v","matchedIndices","_adaptHighlightNullValue","Array","isArray","unhighlightedValueFromArray","index","push","_adaptHighlightTag","indexOf","params","highlightPreTag","highlightPostTag","_adaptHighlightInObjectValue","objectValue","highlightObjectValue","adaptedValue","_adaptHighlightInArrayValue","_adaptHighlightInPrimitiveValue","arrayValue","highlightArrayValue","primitiveValue","highlightPrimitiveValue","length","typesenseFacetCounts","facet","field_name","counts","count","stats","renderingContent","facetOrdering","facets","order","fc","adaptedRenderingContent","_adaptRenderingContent","facet_counts","grouped_hits","_adaptGroupedHits","nbHits","found","page","nbPages","_adaptNumberOfPages","hitsPerPage","request_params","per_page","_adaptFacets","facets_stats","_adaptFacetStats","query","q","processingTimeMS","search_time_ms","prototype","utils"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { utils } from \"./support/utils\";\n\nexport class SearchResponseAdapter {\n  constructor(typesenseResponse, instantsearchRequest, configuration) {\n    this.typesenseResponse = typesenseResponse;\n    this.instantsearchRequest = instantsearchRequest;\n    this.configuration = configuration;\n  }\n\n  _adaptGroupedHits(typesenseGroupedHits) {\n    let adaptedResult = [];\n\n    adaptedResult = typesenseGroupedHits.map((groupedHit) => {\n      const adaptedHits = this._adaptHits(groupedHit.hits);\n      adaptedHits.forEach((hit) => (hit[\"group_key\"] = groupedHit.group_key));\n      return adaptedHits;\n    });\n\n    // adaptedResult is now in the form of [[{}, {}], [{}, {}], ...]\n    //  where each element in the outermost array corresponds to a group.\n    // We now flatten it to [{}, {}, {}]\n    adaptedResult = adaptedResult.flat();\n\n    return adaptedResult;\n  }\n\n  _adaptHits(typesenseHits) {\n    let adaptedResult = [];\n    adaptedResult = typesenseHits.map((typesenseHit) => {\n      const adaptedHit = {\n        ...typesenseHit.document,\n      };\n      adaptedHit.objectID = typesenseHit.document.id;\n      adaptedHit._snippetResult = this._adaptHighlightResult(typesenseHit, \"snippet\");\n      adaptedHit._highlightResult = this._adaptHighlightResult(typesenseHit, \"value\");\n      adaptedHit._rawTypesenseHit = typesenseHit;\n\n      // Add metadata fields to result, if a field with that name doesn't already exist\n      [\"text_match\", \"geo_distance_meters\", \"curated\", \"text_match_info\"].forEach((metadataField) => {\n        if (Object.keys(typesenseHit).includes(metadataField) && !Object.keys(adaptedHit).includes(metadataField)) {\n          adaptedHit[metadataField] = typesenseHit[metadataField];\n        }\n      });\n\n      const geoLocationValue = adaptedHit[this.configuration.geoLocationField];\n      if (geoLocationValue) {\n        adaptedHit._geoloc = {\n          lat: geoLocationValue[0],\n          lng: geoLocationValue[1],\n        };\n      }\n\n      return adaptedHit;\n    });\n    return adaptedResult;\n  }\n\n  _adaptHighlightResult(typesenseHit, snippetOrValue) {\n    const result = {};\n\n    // If there is a highlight object available (as of v0.24.0),\n    // And the highlight object uses the highlight format available in v0.24.0.rcn32 and above\n    //  use that instead of the highlights array, since it supports highlights of nested fields\n    if (typesenseHit.highlight != null && this.isHighlightPost0240RCN32Format(typesenseHit.highlight)) {\n      this.adaptHighlightObject(typesenseHit, result, snippetOrValue);\n    } else {\n      this.adaptHighlightsArray(typesenseHit, result, snippetOrValue);\n    }\n    return result;\n  }\n\n  isHighlightPost0240RCN32Format(highlight) {\n    return highlight.full == null && highlight.snippet == null;\n  }\n\n  adaptHighlightsArray(typesenseHit, result, snippetOrValue) {\n    // Algolia lists all searchable attributes in this key, even if there are no matches\n    // So do the same and then override highlights\n\n    Object.assign(\n      result,\n      ...Object.entries(typesenseHit.document).map(([attribute, value]) => ({\n        [attribute]: {\n          value: value,\n          matchLevel: \"none\",\n          matchedWords: [],\n        },\n      }))\n    );\n\n    typesenseHit.highlights.forEach((highlight) => {\n      result[highlight.field] = {\n        value: highlight[snippetOrValue] || highlight[`${snippetOrValue}s`],\n        matchLevel: \"full\",\n        matchedWords: highlight.matched_tokens,\n      };\n\n      if (highlight.indices) {\n        result[highlight.field][\"matchedIndices\"] = highlight.indices;\n      }\n    });\n\n    // Now convert any values that have an array value\n    // Also, replace highlight tag\n    Object.entries(result).forEach(([k, v]) => {\n      const attribute = k;\n      const { value, matchLevel, matchedWords, matchedIndices } = v;\n      if (value == null) {\n        result[attribute] = this._adaptHighlightNullValue();\n      } else if (Array.isArray(value)) {\n        // Algolia lists all values of the key in highlights, even those that don't have any highlights\n        // So add all values of the array field, including highlights\n        result[attribute] = [];\n        typesenseHit.document[attribute].forEach((unhighlightedValueFromArray, index) => {\n          if (matchedIndices && matchedIndices.includes(index)) {\n            result[attribute].push({\n              value: this._adaptHighlightTag(\n                `${value[matchedIndices.indexOf(index)]}`,\n                this.instantsearchRequest.params.highlightPreTag,\n                this.instantsearchRequest.params.highlightPostTag\n              ),\n              matchLevel: matchLevel,\n              matchedWords: matchedWords[index],\n            });\n          } else if (typeof unhighlightedValueFromArray === \"object\") {\n            // Handle arrays of objects\n            // Side note: Typesense does not support highlights for nested objects in this `highlights` array,\n            //  so we pass in an empty object below\n            result[attribute].push(this._adaptHighlightInObjectValue(unhighlightedValueFromArray, {}, snippetOrValue));\n          } else {\n            result[attribute].push({\n              value: `${unhighlightedValueFromArray}`,\n              matchLevel: \"none\",\n              matchedWords: [],\n            });\n          }\n        });\n      } else if (typeof value === \"object\") {\n        // Handle nested objects\n        // Side note: Typesense does not support highlights for nested objects in this `highlights` array,\n        //  so we pass in an empty object below\n        result[attribute] = this._adaptHighlightInObjectValue(value, {}, snippetOrValue);\n      } else {\n        // Convert all values to strings\n        result[attribute].value = this._adaptHighlightTag(\n          `${value}`,\n          this.instantsearchRequest.params.highlightPreTag,\n          this.instantsearchRequest.params.highlightPostTag\n        );\n      }\n    });\n  }\n\n  adaptHighlightObject(typesenseHit, result, snippetOrValue) {\n    Object.assign(\n      result,\n      this._adaptHighlightInObjectValue(typesenseHit.document, typesenseHit.highlight, snippetOrValue)\n    );\n  }\n\n  _adaptHighlightInObjectValue(objectValue, highlightObjectValue, snippetOrValue) {\n    return Object.assign(\n      {},\n      ...Object.entries(objectValue).map(([attribute, value]) => {\n        let adaptedValue;\n        if (value == null) {\n          adaptedValue = this._adaptHighlightNullValue();\n        } else if (Array.isArray(value)) {\n          adaptedValue = this._adaptHighlightInArrayValue(\n            value,\n            highlightObjectValue?.[attribute] ?? [],\n            snippetOrValue\n          );\n        } else if (typeof value === \"object\") {\n          adaptedValue = this._adaptHighlightInObjectValue(\n            value,\n            highlightObjectValue?.[attribute] ?? {},\n            snippetOrValue\n          );\n        } else {\n          adaptedValue = this._adaptHighlightInPrimitiveValue(value, highlightObjectValue?.[attribute], snippetOrValue);\n        }\n\n        return {\n          [attribute]: adaptedValue,\n        };\n      })\n    );\n  }\n\n  _adaptHighlightInArrayValue(arrayValue, highlightArrayValue, snippetOrValue) {\n    return arrayValue.map((value, index) => {\n      let adaptedValue;\n      if (value == null) {\n        adaptedValue = this._adaptHighlightNullValue();\n      } else if (Array.isArray(value)) {\n        adaptedValue = this._adaptHighlightInArrayValue(value, highlightArrayValue?.[index] ?? [], snippetOrValue);\n      } else if (typeof value === \"object\") {\n        adaptedValue = this._adaptHighlightInObjectValue(value, highlightArrayValue?.[index] ?? {}, snippetOrValue);\n      } else {\n        adaptedValue = this._adaptHighlightInPrimitiveValue(value, highlightArrayValue?.[index], snippetOrValue);\n      }\n      return adaptedValue;\n    });\n  }\n\n  _adaptHighlightInPrimitiveValue(primitiveValue, highlightPrimitiveValue, snippetOrValue) {\n    if (highlightPrimitiveValue != null) {\n      return {\n        value: this._adaptHighlightTag(\n          `${\n            highlightPrimitiveValue[snippetOrValue] ??\n            highlightPrimitiveValue[\"highlight\"] ??\n            highlightPrimitiveValue[\"snippet\"]\n          }`,\n          this.instantsearchRequest.params.highlightPreTag,\n          this.instantsearchRequest.params.highlightPostTag\n        ),\n        matchLevel: (highlightPrimitiveValue.matched_tokens || []).length > 0 ? \"full\" : \"none\",\n        matchedWords: highlightPrimitiveValue.matched_tokens || [],\n      };\n    } else {\n      return {\n        // Convert all values to strings\n        value: this._adaptHighlightTag(\n          `${primitiveValue}`,\n          this.instantsearchRequest.params.highlightPreTag,\n          this.instantsearchRequest.params.highlightPostTag\n        ),\n        matchLevel: \"none\",\n        matchedWords: [],\n      };\n    }\n  }\n\n  _adaptHighlightNullValue() {\n    return {\n      value: \"\",\n      matchLevel: \"none\",\n      matchedWords: [],\n    };\n  }\n\n  _adaptFacets(typesenseFacetCounts) {\n    const adaptedResult = {};\n    typesenseFacetCounts.forEach((facet) => {\n      Object.assign(adaptedResult, {\n        [facet.field_name]: Object.assign({}, ...facet.counts.map((count) => ({ [count.value]: count.count }))),\n      });\n    });\n    return adaptedResult;\n  }\n\n  _adaptFacetStats(typesenseFacetCounts) {\n    const adaptedResult = {};\n    typesenseFacetCounts.forEach((facet) => {\n      if (Object.keys(facet.stats).length > 0) {\n        Object.assign(adaptedResult, {\n          [facet.field_name]: facet.stats,\n        });\n      }\n    });\n    return adaptedResult;\n  }\n\n  _adaptRenderingContent(typesenseFacetCounts) {\n    const adaptedResult = Object.assign({}, this.configuration.renderingContent);\n\n    // Only set facet ordering if the user has not set one\n    if (adaptedResult.facetOrdering?.facets?.order == null) {\n      adaptedResult.facetOrdering = adaptedResult.facetOrdering || {};\n      adaptedResult.facetOrdering.facets = adaptedResult.facetOrdering.facets || {};\n      adaptedResult.facetOrdering.facets.order = typesenseFacetCounts.map((fc) => fc[\"field_name\"]);\n    }\n\n    return adaptedResult;\n  }\n\n  adapt() {\n    const adaptedRenderingContent = this._adaptRenderingContent(this.typesenseResponse.facet_counts || []);\n    const adaptedResult = {\n      hits: this.typesenseResponse.grouped_hits\n        ? this._adaptGroupedHits(this.typesenseResponse.grouped_hits)\n        : this._adaptHits(this.typesenseResponse.hits),\n      nbHits: this.typesenseResponse.found,\n      page: this.typesenseResponse.page - 1,\n      nbPages: this._adaptNumberOfPages(),\n      hitsPerPage: this.typesenseResponse.request_params.per_page,\n      facets: this._adaptFacets(this.typesenseResponse.facet_counts || []),\n      facets_stats: this._adaptFacetStats(this.typesenseResponse.facet_counts || {}),\n      query: this.typesenseResponse.request_params.q,\n      processingTimeMS: this.typesenseResponse.search_time_ms,\n      ...(Object.keys(adaptedRenderingContent).length > 0 ? { renderingContent: adaptedRenderingContent } : null),\n    };\n\n    // console.log(adaptedResult);\n    return adaptedResult;\n  }\n}\n\nObject.assign(SearchResponseAdapter.prototype, utils);\n"],"file":"SearchResponseAdapter.js"}