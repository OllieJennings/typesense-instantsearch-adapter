{"version":3,"sources":["../src/SearchResponseAdapter.js"],"names":["SearchResponseAdapter","typesenseResponse","instantsearchRequest","configuration","typesenseGroupedHits","adaptedResult","map","groupedHit","adaptedHits","_adaptHits","hits","forEach","hit","group_key","flat","typesenseHits","typesenseHit","adaptedHit","document","objectID","id","_snippetResult","_adaptHighlightResult","_highlightResult","metadataField","Object","keys","includes","geoLocationValue","geoLocationField","_geoloc","lat","lng","snippetOrValue","result","highlight","adaptHighlightObject","adaptHighlightsArray","assign","entries","attribute","value","matchLevel","matchedWords","highlights","field","matched_tokens","indices","k","v","matchedIndices","Array","isArray","unhighlightedValueFromArray","index","push","_adaptHighlightTag","indexOf","params","highlightPreTag","highlightPostTag","highlightSubKey","_adaptHighlightInObjectValue","meta","objectValue","highlightObjectValue","highlightMeta","adaptedValue","_adaptHighlightInArrayValue","_adaptHighlightInPrimitiveValue","arrayValue","highlightArrayValue","primitiveValue","highlightPrimitiveValue","matched_indices","typesenseFacetCounts","facet","field_name","counts","count","stats","length","grouped_hits","_adaptGroupedHits","nbHits","found","page","nbPages","_adaptNumberOfPages","hitsPerPage","request_params","per_page","facets","_adaptFacets","facet_counts","facets_stats","_adaptFacetStats","query","q","processingTimeMS","search_time_ms","console","log","prototype","utils"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { utils } from \"./support/utils\";\n\nexport class SearchResponseAdapter {\n  constructor(typesenseResponse, instantsearchRequest, configuration) {\n    this.typesenseResponse = typesenseResponse;\n    this.instantsearchRequest = instantsearchRequest;\n    this.configuration = configuration;\n  }\n\n  _adaptGroupedHits(typesenseGroupedHits) {\n    let adaptedResult = [];\n\n    adaptedResult = typesenseGroupedHits.map((groupedHit) => {\n      const adaptedHits = this._adaptHits(groupedHit.hits);\n      adaptedHits.forEach((hit) => (hit[\"group_key\"] = groupedHit.group_key));\n      return adaptedHits;\n    });\n\n    // adaptedResult is now in the form of [[{}, {}], [{}, {}], ...]\n    //  where each element in the outer most array corresponds to a group.\n    // We now flatten it to [{}, {}, {}]\n    adaptedResult = adaptedResult.flat();\n\n    return adaptedResult;\n  }\n\n  _adaptHits(typesenseHits) {\n    let adaptedResult = [];\n    adaptedResult = typesenseHits.map((typesenseHit) => {\n      const adaptedHit = {\n        ...typesenseHit.document,\n      };\n      adaptedHit.objectID = typesenseHit.document.id;\n      adaptedHit._snippetResult = this._adaptHighlightResult(typesenseHit, \"snippet\");\n      adaptedHit._highlightResult = this._adaptHighlightResult(typesenseHit, \"value\");\n\n      // Add metadata fields to result, if a field with that name doesn't already exist\n      [\"text_match\", \"geo_distance_meters\", \"curated\"].forEach((metadataField) => {\n        if (Object.keys(typesenseHit).includes(metadataField) && !Object.keys(adaptedHit).includes(metadataField)) {\n          adaptedHit[metadataField] = typesenseHit[metadataField];\n        }\n      });\n\n      const geoLocationValue = adaptedHit[this.configuration.geoLocationField];\n      if (geoLocationValue) {\n        adaptedHit._geoloc = {\n          lat: geoLocationValue[0],\n          lng: geoLocationValue[1],\n        };\n      }\n\n      return adaptedHit;\n    });\n    return adaptedResult;\n  }\n\n  _adaptHighlightResult(typesenseHit, snippetOrValue) {\n    const result = {};\n\n    // If there is a highlight object available (as of v0.24.0),\n    //  use that instead of the highlights array, since it supports highlights of nested fields\n    if (typesenseHit.highlight != null) {\n      this.adaptHighlightObject(typesenseHit, result, snippetOrValue);\n    } else {\n      this.adaptHighlightsArray(typesenseHit, result, snippetOrValue);\n    }\n    return result;\n  }\n\n  adaptHighlightsArray(typesenseHit, result, snippetOrValue) {\n    // Algolia lists all searchable attributes in this key, even if there are no matches\n    // So do the same and then override highlights\n\n    Object.assign(\n      result,\n      ...Object.entries(typesenseHit.document).map(([attribute, value]) => ({\n        [attribute]: {\n          value: value,\n          matchLevel: \"none\",\n          matchedWords: [],\n        },\n      }))\n    );\n\n    typesenseHit.highlights.forEach((highlight) => {\n      result[highlight.field] = {\n        value: highlight[snippetOrValue] || highlight[`${snippetOrValue}s`],\n        matchLevel: \"full\",\n        matchedWords: highlight.matched_tokens,\n      };\n\n      if (highlight.indices) {\n        result[highlight.field][\"matchedIndices\"] = highlight.indices;\n      }\n    });\n\n    // Now convert any values that have an array value\n    // Also, replace highlight tag\n    Object.entries(result).forEach(([k, v]) => {\n      const attribute = k;\n      const { value, matchLevel, matchedWords, matchedIndices } = v;\n      if (Array.isArray(value)) {\n        // Algolia lists all values of the key in highlights, even those that don't have any highlights\n        // So add all values of the array field, including highlights\n        result[attribute] = [];\n        typesenseHit.document[attribute].forEach((unhighlightedValueFromArray, index) => {\n          if (matchedIndices && matchedIndices.includes(index)) {\n            result[attribute].push({\n              value: this._adaptHighlightTag(\n                `${value[matchedIndices.indexOf(index)]}`,\n                this.instantsearchRequest.params.highlightPreTag,\n                this.instantsearchRequest.params.highlightPostTag\n              ),\n              matchLevel: matchLevel,\n              matchedWords: matchedWords[index],\n            });\n          } else {\n            result[attribute].push({\n              value: `${unhighlightedValueFromArray}`,\n              matchLevel: \"none\",\n              matchedWords: [],\n            });\n          }\n        });\n      } else {\n        // Convert all values to strings\n        result[attribute].value = this._adaptHighlightTag(\n          `${value}`,\n          this.instantsearchRequest.params.highlightPreTag,\n          this.instantsearchRequest.params.highlightPostTag\n        );\n      }\n    });\n  }\n\n  adaptHighlightObject(typesenseHit, result, snippetOrValue) {\n    const highlightSubKey = snippetOrValue === \"value\" ? \"full\" : \"snippet\";\n\n    Object.assign(\n      result,\n      this._adaptHighlightInObjectValue(typesenseHit.document, typesenseHit.highlight[highlightSubKey], typesenseHit.highlight.meta)\n    );\n  }\n\n  _adaptHighlightInObjectValue(objectValue, highlightObjectValue, highlightMeta) {\n    return Object.assign(\n      {},\n      ...Object.entries(objectValue).map(([attribute, value]) => {\n        let adaptedValue;\n        if (Array.isArray(value)) {\n          adaptedValue = this._adaptHighlightInArrayValue(value, highlightObjectValue[attribute] ?? {}, highlightMeta[attribute] ?? {});\n        } else if (typeof value === \"object\") {\n          adaptedValue = this._adaptHighlightInObjectValue(value, highlightObjectValue[attribute] ?? {}, highlightMeta[attribute] ?? {});\n        } else {\n          adaptedValue = this._adaptHighlightInPrimitiveValue(value, highlightObjectValue[attribute], highlightMeta[attribute]);\n        }\n\n        return {\n          [attribute]: adaptedValue,\n        };\n      })\n    );\n  }\n\n  _adaptHighlightInArrayValue(arrayValue, highlightArrayValue, highlightMeta) {\n    return arrayValue.map((value, index) => {\n      let adaptedValue;\n      if (Array.isArray(value)) {\n        adaptedValue = this._adaptHighlightInArrayValue(value, highlightArrayValue[index], highlightMeta[index]);\n      } else if (typeof value === \"object\") {\n        adaptedValue = this._adaptHighlightInObjectValue(value, highlightArrayValue[index], highlightMeta[index]);\n      } else {\n        adaptedValue = this._adaptHighlightInPrimitiveValue(value, highlightArrayValue[index], highlightMeta[index]);\n      }\n      return adaptedValue;\n    });\n  }\n\n  _adaptHighlightInPrimitiveValue(primitiveValue, highlightPrimitiveValue, highlightMeta) {\n    if (highlightPrimitiveValue != null) {\n      return {\n        value: this._adaptHighlightTag(\n          `${highlightPrimitiveValue}`,\n          this.instantsearchRequest.params.highlightPreTag,\n          this.instantsearchRequest.params.highlightPostTag\n        ),\n        matchLevel: \"full\",\n        matchedWords: highlightMeta.matched_tokens,\n        matchedIndices: highlightMeta.matched_indices,\n      };\n    } else {\n      return {\n        // Convert all values to strings\n        value: this._adaptHighlightTag(\n          `${primitiveValue}`,\n          this.instantsearchRequest.params.highlightPreTag,\n          this.instantsearchRequest.params.highlightPostTag\n        ),\n        matchLevel: \"none\",\n        matchedWords: [],\n      };\n    }\n  }\n\n  _adaptFacets(typesenseFacetCounts) {\n    const adaptedResult = {};\n    typesenseFacetCounts.forEach((facet) => {\n      Object.assign(adaptedResult, {\n        [facet.field_name]: Object.assign({}, ...facet.counts.map((count) => ({ [count.value]: count.count }))),\n      });\n    });\n    return adaptedResult;\n  }\n\n  _adaptFacetStats(typesenseFacetCounts) {\n    const adaptedResult = {};\n    typesenseFacetCounts.forEach((facet) => {\n      if (Object.keys(facet.stats).length > 0) {\n        Object.assign(adaptedResult, {\n          [facet.field_name]: facet.stats,\n        });\n      }\n    });\n    return adaptedResult;\n  }\n\n  adapt() {\n    const adaptedResult = {\n      hits: this.typesenseResponse.grouped_hits\n        ? this._adaptGroupedHits(this.typesenseResponse.grouped_hits)\n        : this._adaptHits(this.typesenseResponse.hits),\n      nbHits: this.typesenseResponse.found,\n      page: this.typesenseResponse.page - 1,\n      nbPages: this._adaptNumberOfPages(),\n      hitsPerPage: this.typesenseResponse.request_params.per_page,\n      facets: this._adaptFacets(this.typesenseResponse.facet_counts || []),\n      facets_stats: this._adaptFacetStats(this.typesenseResponse.facet_counts || {}),\n      query: this.typesenseResponse.request_params.q,\n      processingTimeMS: this.typesenseResponse.search_time_ms,\n    };\n\n    console.log(adaptedResult);\n    return adaptedResult;\n  }\n}\n\nObject.assign(SearchResponseAdapter.prototype, utils);\n"],"file":"SearchResponseAdapter.js"}