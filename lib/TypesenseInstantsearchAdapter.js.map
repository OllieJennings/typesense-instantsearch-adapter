{"version":3,"file":"TypesenseInstantsearchAdapter.js","names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_regenerator","_asyncToGenerator2","_classCallCheck2","_createClass2","_Configuration","_typesense","_SearchRequestAdapter","_SearchResponseAdapter","_FacetSearchResponseAdapter","TypesenseInstantsearchAdapter","options","_this","updateConfiguration","searchClient","clearCache","search","instantsearchRequests","searchTypesenseAndAdapt","searchForFacetValues","searchTypesenseForFacetValuesAndAdapt","key","_searchTypesenseAndAdapt","mark","_callee","_this2","typesenseResponse","responseAdapter","adaptedResponse","adaptedResponses","_adaptedResponses","_t","wrap","_context","prev","next","_adaptAndPerformTypesenseRequest","sent","union_request_params","_validateTypesenseResult","SearchResponseAdapter","configuration","adapt","map","abrupt","results","typesenseResult","index","console","error","stop","_x","apply","arguments","_searchTypesenseForFacetValuesAndAdapt","_callee2","_this3","_t2","_context2","FacetSearchResponseAdapter","_x2","_adaptAndPerformTypesenseRequest2","_callee3","requestAdapter","_context3","SearchRequestAdapter","typesenseClient","request","_x3","TypesenseSearchClient","server","Configuration","validate","Error","concat","code","hits","grouped_hits"],"sources":["../src/TypesenseInstantsearchAdapter.js"],"sourcesContent":["\"use strict\";\n\nimport { Configuration } from \"./Configuration\";\nimport { SearchClient as TypesenseSearchClient } from \"typesense\";\nimport { SearchRequestAdapter } from \"./SearchRequestAdapter\";\nimport { SearchResponseAdapter } from \"./SearchResponseAdapter\";\nimport { FacetSearchResponseAdapter } from \"./FacetSearchResponseAdapter\";\n\nexport default class TypesenseInstantsearchAdapter {\n  constructor(options) {\n    this.updateConfiguration(options);\n    this.searchClient = {\n      clearCache: () => this.clearCache(),\n      search: (instantsearchRequests) => this.searchTypesenseAndAdapt(instantsearchRequests),\n      searchForFacetValues: (instantsearchRequests) =>\n        this.searchTypesenseForFacetValuesAndAdapt(instantsearchRequests),\n    };\n  }\n\n  async searchTypesenseAndAdapt(instantsearchRequests) {\n    let typesenseResponse;\n    try {\n      typesenseResponse = await this._adaptAndPerformTypesenseRequest(instantsearchRequests);\n\n      // Check if this is a union search response\n      if (typesenseResponse.union_request_params) {\n        // Handle union search response - single unified response\n        this._validateTypesenseResult(typesenseResponse);\n        const responseAdapter = new SearchResponseAdapter(\n          typesenseResponse,\n          instantsearchRequests[0], // Use first request as base\n          this.configuration,\n          [typesenseResponse], // Pass single response as allTypesenseResults\n          typesenseResponse,\n        );\n        let adaptedResponse = responseAdapter.adapt();\n\n        // InstantSearch expects one result per request, so return the same adapted response for each request\n        const adaptedResponses = instantsearchRequests.map(() => adaptedResponse);\n\n        return {\n          results: adaptedResponses,\n        };\n      } else {\n        // Handle regular multi-search response - multiple separate responses\n        const adaptedResponses = typesenseResponse.results.map((typesenseResult, index) => {\n          this._validateTypesenseResult(typesenseResult);\n          const responseAdapter = new SearchResponseAdapter(\n            typesenseResult,\n            instantsearchRequests[index],\n            this.configuration,\n            typesenseResponse.results,\n            typesenseResponse,\n          );\n          let adaptedResponse = responseAdapter.adapt();\n\n          return adaptedResponse;\n        });\n\n        return {\n          results: adaptedResponses,\n        };\n      }\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  async searchTypesenseForFacetValuesAndAdapt(instantsearchRequests) {\n    let typesenseResponse;\n    try {\n      typesenseResponse = await this._adaptAndPerformTypesenseRequest(instantsearchRequests);\n\n      const adaptedResponses = typesenseResponse.results.map((typesenseResult, index) => {\n        this._validateTypesenseResult(typesenseResult);\n        const responseAdapter = new FacetSearchResponseAdapter(\n          typesenseResult,\n          instantsearchRequests[index],\n          this.configuration,\n        );\n        return responseAdapter.adapt();\n      });\n\n      return adaptedResponses;\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  async _adaptAndPerformTypesenseRequest(instantsearchRequests) {\n    const requestAdapter = new SearchRequestAdapter(instantsearchRequests, this.typesenseClient, this.configuration);\n    const typesenseResponse = await requestAdapter.request();\n    return typesenseResponse;\n  }\n\n  clearCache() {\n    this.typesenseClient = new TypesenseSearchClient(this.configuration.server);\n    return this.searchClient;\n  }\n\n  updateConfiguration(options) {\n    this.configuration = new Configuration(options);\n    this.configuration.validate();\n    this.typesenseClient = new TypesenseSearchClient(this.configuration.server);\n    return true;\n  }\n\n  _validateTypesenseResult(typesenseResult) {\n    if (typesenseResult.error) {\n      throw new Error(`${typesenseResult.code} - ${typesenseResult.error}`);\n    }\n    if (!typesenseResult.hits && !typesenseResult.grouped_hits) {\n      throw new Error(`Did not find any hits. ${typesenseResult.code} - ${typesenseResult.error}`);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}