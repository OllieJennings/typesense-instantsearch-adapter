{"version":3,"file":"SearchRequestAdapter.js","names":["_objectWithoutProperties","_asyncToGenerator","_toConsumableArray","_slicedToArray","_classCallCheck","_createClass","_excluded","_regeneratorRuntime","SearchRequestAdapter","instantsearchRequests","typesenseClient","configuration","additionalSearchParameters","collectionSpecificSearchParameters","key","value","_shouldUseExactMatchForField","fieldName","collectionName","_this$configuration$c","_this$configuration$f","collectionSpecificFilterByOptions","exactMatch","filterByOptions","_buildFacetFilterString","_ref","_this","fieldValues","isExcluded","joinedRelationMatch","match","constructor","JOINED_RELATION_FILTER_REGEX","operator","length","collection","fieldPath","concat","map","v","_escapeFacetValue","join","_adaptFacetFilters","facetFilters","_this2","adaptedResult","transformedTypesenseFilters","item","Array","isArray","intermediateFacetFilters","forEach","facetFilter","_this2$_parseFacetFil","_parseFacetFilter","fieldValue","push","Object","keys","console","error","_fieldValues$reduce","reduce","result","startsWith","_isNumber","substring","_fieldValues$reduce2","excludedFieldValues","includedFieldValues","typesenseFilterStringComponents","typesenseFilterString","filter","f","_this2$_parseFacetFil2","_groupJoinFilters","_this$configuration$f2","filterStringMatchingRegex","facetFilterMatches","facetableFieldsWithSpecialCharacters","sanitizedFacetableFieldsWithSpecialCharacters","flat","replace","RegExp","DEFAULT_FACET_FILTER_STRING_MATCHING_REGEX","Number","isInteger","filters","joinFiltersMap","regularFilters","joinMatch","innerFilter","groupedJoinFilters","innerFilters","_adaptNumericFilters","numericFilters","_this3","filtersHash","_this3$_parseNumericF","_parseNumericFilter","adaptedFilters","field","warn","JSON","stringify","numericFilter","_this$configuration$f3","numericFilterMatches","_numericFilterMatches","_numericFilterMatches2","DEFAULT_NUMERIC_FILTER_STRING_MATCHING_REGEX","_numericFilterMatches3","_numericFilterMatches4","_adaptGeoFilter","_ref2","insideBoundingBox","aroundRadius","aroundLatLng","insidePolygon","x1","y1","x2","y2","_insideBoundingBox$fl","_insideBoundingBox$fl2","_insideBoundingBox$sp","split","_insideBoundingBox$sp2","geoLocationField","Error","adaptedAroundRadius","parseFloat","coordinates","_adaptFilters","instantsearchParams","_adaptIndexName","indexName","INDEX_NAME_MATCHING_REGEX","_adaptSortBy","_adaptFacetBy","facets","_this4","facet","_this4$configuration$","collectionSpecificFacetByOptions","facetByOptions","_adaptRulesContextsToOverrideTags","ruleContexts","_buildSearchParameters","instantsearchRequest","_this$configuration$c2","_this$configuration$s","params","adaptedCollectionName","snakeCasedAdditionalSearchParameters","_i","_Object$entries","entries","_Object$entries$_i","_camelToSnakeCase","_i2","_Object$entries2","_Object$entries2$_i","typesenseSearchParams","assign","adaptedSortBy","q","query","undefined","facet_by","filter_by","sort_by","max_facet_values","maxValuesPerFacet","page","hitsPerPage","per_page","facetQuery","facet_query","facetName","override_tags","typesenseVectorQuery","vector_query","sortByOption","collectionSpecificSortByOptions","sortByOptions","fromEntries","_ref3","_ref4","_","str","toLowerCase","_request","mark","_callee","_this5","_searches$","_searches$2","searches","commonParams","_searches$3","conversation","conversation_id","conversation_model_id","searchRequest","wrap","_callee$","_context","prev","next","searchParams","modifiedSearchParams","union","abrupt","multiSearch","perform","stop","request","apply","arguments","get"],"sources":["../src/SearchRequestAdapter.js"],"sourcesContent":["\"use strict\";\n\nexport class SearchRequestAdapter {\n  static get INDEX_NAME_MATCHING_REGEX() {\n    return new RegExp(\"^(.+?)(?=(/sort/(.*))|$)\");\n  }\n\n  static get DEFAULT_FACET_FILTER_STRING_MATCHING_REGEX() {\n    return new RegExp(\"(.*)((?!:).):(?!:)(.*)\");\n  }\n\n  static get DEFAULT_NUMERIC_FILTER_STRING_MATCHING_REGEX() {\n    return new RegExp(\"(.*?)(<=|>=|>|<|=)(.*)\");\n  }\n\n  static get JOINED_RELATION_FILTER_REGEX() {\n    return new RegExp(\"^(\\\\$[^(]+)\\\\(([^)]+)\\\\)$\");\n  }\n\n  constructor(instantsearchRequests, typesenseClient, configuration) {\n    this.instantsearchRequests = instantsearchRequests;\n    this.typesenseClient = typesenseClient;\n    this.configuration = configuration;\n    this.additionalSearchParameters = configuration.additionalSearchParameters;\n    this.collectionSpecificSearchParameters = configuration.collectionSpecificSearchParameters;\n  }\n\n  _shouldUseExactMatchForField(fieldName, collectionName) {\n    if (\n      this.configuration.collectionSpecificFilterByOptions?.[collectionName]?.[fieldName]?.exactMatch === false ||\n      this.configuration.filterByOptions?.[fieldName]?.exactMatch === false\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  _buildFacetFilterString({ fieldName, fieldValues, isExcluded, collectionName }) {\n    // Check if this is a joined relation filter (e.g., \"$refCollection(retailer)\")\n    const joinedRelationMatch = fieldName.match(this.constructor.JOINED_RELATION_FILTER_REGEX);\n\n    const operator = isExcluded\n      ? this._shouldUseExactMatchForField(fieldName, collectionName)\n        ? \":!=\"\n        : \":!\"\n      : this._shouldUseExactMatchForField(fieldName, collectionName)\n        ? \":=\"\n        : \":\";\n\n    if (joinedRelationMatch && joinedRelationMatch.length >= 3) {\n      // This is a joined relation filter\n      const collection = joinedRelationMatch[1]; // e.g., \"$refCollection\"\n      const fieldPath = joinedRelationMatch[2]; // e.g., \"retailer\"\n      // For joined relations, the filter should be: $collection(field:=[value1,value2])\n      return `${collection}(${fieldPath}${operator}[${fieldValues.map((v) => this._escapeFacetValue(v)).join(\",\")}])`;\n    } else {\n      // Regular field filter (non-joined)\n      return `${fieldName}${operator}[${fieldValues.map((v) => this._escapeFacetValue(v)).join(\",\")}]`;\n    }\n  }\n\n  _adaptFacetFilters(facetFilters, collectionName) {\n    let adaptedResult = \"\";\n\n    if (!facetFilters) {\n      return adaptedResult;\n    }\n\n    /**\n     * Need to transform:\n     *  facetFilters = [[\"field1:value1\", \"field1:value2\"], \"field2:value3\", \"field2:value4\"]\n     *\n     * Into this:\n     *  field1:=[value1,value2] && field2:=value3 && field2:=value4\n     *\n     * Steps:\n     *  - For each item in facetFilters\n     *    - If item is array\n     *      - OR values together.\n     *      - Warn if field names are not the same\n     *    - If item is string, convert to facet:=value format\n     *  - Join strings by &&\n     */\n\n    const transformedTypesenseFilters = facetFilters.map((item) => {\n      if (Array.isArray(item)) {\n        // Need to transform:\n        // facetFilters = [\"field1:value1\", \"field1:value2\", \"facetN:valueN\"]\n        //\n        // Into this:\n        // intermediateFacetFilters = {\n        //     \"field1\": [\"value1\", \"value2\"],\n        //     \"fieldN\": [\"valueN\"]\n        // }\n\n        const intermediateFacetFilters = {};\n        item.forEach((facetFilter) => {\n          const { fieldName, fieldValue } = this._parseFacetFilter(facetFilter);\n          intermediateFacetFilters[fieldName] = intermediateFacetFilters[fieldName] || [];\n          intermediateFacetFilters[fieldName].push(fieldValue);\n        });\n\n        if (Object.keys(intermediateFacetFilters).length > 1) {\n          console.error(\n            `[Typesense-Instantsearch-Adapter] Typesense does not support cross-field ORs at the moment. The adapter could not OR values between these fields: ${Object.keys(\n              intermediateFacetFilters,\n            ).join(\",\")}`,\n          );\n        }\n\n        // Pick first value from intermediateFacetFilters\n        const fieldName = Object.keys(intermediateFacetFilters)[0];\n        const fieldValues = intermediateFacetFilters[fieldName];\n\n        // Need to transform:\n        // intermediateFacetFilters = {\n        //     \"field1\": [\"value1\", \"value2\"],\n        // }\n        //\n        // Into this:\n        // field1:=[value1,value2]\n\n        // Partition values into included and excluded values\n        const [excludedFieldValues, includedFieldValues] = fieldValues.reduce(\n          (result, fieldValue) => {\n            if (fieldValue.startsWith(\"-\") && !this._isNumber(fieldValue)) {\n              result[0].push(fieldValue.substring(1));\n            } else {\n              result[1].push(fieldValue);\n            }\n            return result;\n          },\n          [[], []],\n        );\n\n        const typesenseFilterStringComponents = [];\n        if (includedFieldValues.length > 0) {\n          typesenseFilterStringComponents.push(\n            this._buildFacetFilterString({\n              fieldName,\n              fieldValues: includedFieldValues,\n              isExcluded: false,\n              collectionName,\n            }),\n          );\n        }\n        if (excludedFieldValues.length > 0) {\n          typesenseFilterStringComponents.push(\n            this._buildFacetFilterString({\n              fieldName,\n              fieldValues: excludedFieldValues,\n              isExcluded: true,\n              collectionName,\n            }),\n          );\n        }\n\n        const typesenseFilterString = typesenseFilterStringComponents.filter((f) => f).join(\" && \");\n\n        return typesenseFilterString;\n      } else {\n        // Need to transform:\n        //  fieldName:fieldValue\n        // Into\n        //  fieldName:=fieldValue\n\n        const { fieldName, fieldValue } = this._parseFacetFilter(item);\n        let typesenseFilterString;\n        if (fieldValue.startsWith(\"-\") && !this._isNumber(fieldValue)) {\n          typesenseFilterString = this._buildFacetFilterString({\n            fieldName,\n            fieldValues: [fieldValue.substring(1)],\n            isExcluded: true,\n            collectionName,\n          });\n        } else {\n          typesenseFilterString = this._buildFacetFilterString({\n            fieldName,\n            fieldValues: [fieldValue],\n            isExcluded: false,\n            collectionName,\n          });\n        }\n\n        return typesenseFilterString;\n      }\n    });\n\n    // Group join filters by their collection\n    adaptedResult = this._groupJoinFilters(transformedTypesenseFilters);\n    // console.log(`${JSON.stringify(facetFilters)} => ${adaptedResult}`);\n\n    return adaptedResult;\n  }\n\n  _parseFacetFilter(facetFilter) {\n    let filterStringMatchingRegex, facetFilterMatches, fieldName, fieldValue;\n\n    // This is helpful when the filter looks like `facetName:with:colons:facetValue:with:colons` and the default regex above parses the filter as `facetName:with:colons:facetValue:with` and `colon`.\n    // So if a facetValue can contain a colon, we ask users to pass in all possible facetable fields in `facetableFieldsWithSpecialCharacters` when instantiating the adapter, so we can explicitly match against that.\n    if (this.configuration.facetableFieldsWithSpecialCharacters?.length > 0) {\n      // escape any Regex special characters, source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping\n      const sanitizedFacetableFieldsWithSpecialCharacters = this.configuration.facetableFieldsWithSpecialCharacters\n        .flat()\n        .map((f) => f.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"));\n      filterStringMatchingRegex = new RegExp(`^(${sanitizedFacetableFieldsWithSpecialCharacters.join(\"|\")}):(.*)$`);\n      facetFilterMatches = facetFilter.match(filterStringMatchingRegex);\n\n      if (facetFilterMatches != null) {\n        fieldName = `${facetFilterMatches[1]}`;\n        fieldValue = `${facetFilterMatches[2]}`;\n\n        return {\n          fieldName,\n          fieldValue,\n        };\n      }\n    }\n\n    // If we haven't found any matches yet\n    // Use the default filter parsing regex, which assumes that only facet names have colons, and not facet values\n    filterStringMatchingRegex = this.constructor.DEFAULT_FACET_FILTER_STRING_MATCHING_REGEX;\n    facetFilterMatches = facetFilter.match(filterStringMatchingRegex);\n\n    // console.log(filterStringMatchingRegex);\n    // console.log(facetFilter);\n    // console.log(facetFilterMatches);\n\n    if (facetFilterMatches == null) {\n      console.error(\n        `[Typesense-Instantsearch-Adapter] Parsing failed for a facet filter \\`${facetFilter}\\` with the Regex \\`${filterStringMatchingRegex}\\`. If you have field names with special characters, be sure to add them to a parameter called \\`facetableFieldsWithSpecialCharacters\\` when instantiating the adapter.`,\n      );\n    } else {\n      fieldName = `${facetFilterMatches[1]}${facetFilterMatches[2]}`;\n      fieldValue = `${facetFilterMatches[3]}`;\n    }\n\n    return {\n      fieldName,\n      fieldValue,\n    };\n  }\n\n  _escapeFacetValue(value) {\n    // Don't escape booleans, integers or floats\n    if (typeof value === \"boolean\" || value === \"true\" || value === \"false\" || this._isNumber(value)) {\n      return value;\n    }\n    return `\\`${value}\\``;\n  }\n\n  _isNumber(value) {\n    return (\n      Number.isInteger(value % 1) || // Mod 1 will automatically try converting string values to integer/float\n      !!(value % 1)\n    ); // Is Float\n  }\n\n  _groupJoinFilters(filters) {\n    // Group join filters by their collection name\n    // Example: [\"$product_prices(retailer:=[`value1`])\", \"$product_prices(status:=[`active`])\", \"brand:=[`Apple`]\"]\n    // Should become: [\"$product_prices(retailer:=[`value1`] && status:=[`active`])\", \"brand:=[`Apple`]\"]\n\n    const joinFiltersMap = {};\n    const regularFilters = [];\n\n    filters.forEach((filter) => {\n      // Match pattern like \"$collection(field:=value)\" or \"$collection(field:>=value)\"\n      const joinMatch = filter.match(/^(\\$[^(]+)\\((.*)\\)$/);\n\n      if (joinMatch && joinMatch.length >= 3) {\n        const collection = joinMatch[1]; // e.g., \"$product_prices\"\n        const innerFilter = joinMatch[2]; // e.g., \"retailer:=[`value1`]\"\n\n        if (!joinFiltersMap[collection]) {\n          joinFiltersMap[collection] = [];\n        }\n        joinFiltersMap[collection].push(innerFilter);\n      } else {\n        regularFilters.push(filter);\n      }\n    });\n\n    // Rebuild grouped join filters\n    const groupedJoinFilters = Object.keys(joinFiltersMap).map((collection) => {\n      const innerFilters = joinFiltersMap[collection].join(\" && \");\n      return `${collection}(${innerFilters})`;\n    });\n\n    // Combine grouped join filters with regular filters\n    return [...groupedJoinFilters, ...regularFilters].filter((f) => f).join(\" && \");\n  }\n\n  _adaptNumericFilters(numericFilters) {\n    // Need to transform this:\n    // [\"field1<=634\", \"field1>=289\", \"field2<=5\", \"field3>=3\"]\n    // to:\n    // \"field1:=[634..289] && field2:<=5 && field3:>=3\"\n    let adaptedResult = \"\";\n\n    if (!numericFilters) {\n      return adaptedResult;\n    }\n\n    // Transform to intermediate structure:\n    // {\n    //   field1: {\n    //     \"<=\": 634,\n    //     \">=\": 289\n    //   },\n    //   field2: {\n    //     \"<=\": 5\n    //   },\n    //   field3: {\n    //     \">=\": 3\n    //   }\n    // };\n    const filtersHash = {};\n    numericFilters.forEach((filter) => {\n      const { fieldName, operator, fieldValue } = this._parseNumericFilter(filter);\n      filtersHash[fieldName] = filtersHash[fieldName] || {};\n      filtersHash[fieldName][operator] = fieldValue;\n    });\n\n    // Transform that to:\n    //  \"field1:=[634..289] && field2:<=5 && field3:>=3\"\n    const adaptedFilters = [];\n    Object.keys(filtersHash).forEach((field) => {\n      // Check if this is a joined relation filter (e.g., \"$refCollection(price.current)\")\n      const joinedRelationMatch = field.match(this.constructor.JOINED_RELATION_FILTER_REGEX);\n\n      if (joinedRelationMatch && joinedRelationMatch.length >= 3) {\n        // This is a joined relation filter\n        const collection = joinedRelationMatch[1]; // e.g., \"$refCollection\"\n        const fieldPath = joinedRelationMatch[2]; // e.g., \"price.current\"\n\n        if (filtersHash[field][\"<=\"] != null && filtersHash[field][\">=\"] != null) {\n          adaptedFilters.push(\n            `${collection}(${fieldPath}:=[${filtersHash[field][\">=\"]}..${filtersHash[field][\"<=\"]}])`,\n          );\n        } else if (filtersHash[field][\"<=\"] != null) {\n          adaptedFilters.push(`${collection}(${fieldPath}:<=${filtersHash[field][\"<=\"]})`);\n        } else if (filtersHash[field][\">=\"] != null) {\n          adaptedFilters.push(`${collection}(${fieldPath}:>=${filtersHash[field][\">=\"]})`);\n        } else if (filtersHash[field][\"=\"] != null) {\n          adaptedFilters.push(`${collection}(${fieldPath}:=${filtersHash[field][\"=\"]})`);\n        } else {\n          console.warn(\n            `[Typesense-Instantsearch-Adapter] Unsupported operator found ${JSON.stringify(filtersHash[field])}`,\n          );\n        }\n      } else {\n        // Regular field filter (non-joined)\n        if (filtersHash[field][\"<=\"] != null && filtersHash[field][\">=\"] != null) {\n          adaptedFilters.push(`${field}:=[${filtersHash[field][\">=\"]}..${filtersHash[field][\"<=\"]}]`);\n        } else if (filtersHash[field][\"<=\"] != null) {\n          adaptedFilters.push(`${field}:<=${filtersHash[field][\"<=\"]}`);\n        } else if (filtersHash[field][\">=\"] != null) {\n          adaptedFilters.push(`${field}:>=${filtersHash[field][\">=\"]}`);\n        } else if (filtersHash[field][\"=\"] != null) {\n          adaptedFilters.push(`${field}:=${filtersHash[field][\"=\"]}`);\n        } else {\n          console.warn(\n            `[Typesense-Instantsearch-Adapter] Unsupported operator found ${JSON.stringify(filtersHash[field])}`,\n          );\n        }\n      }\n    });\n\n    // Group join filters by their collection\n    adaptedResult = this._groupJoinFilters(adaptedFilters);\n    return adaptedResult;\n  }\n\n  _parseNumericFilter(numericFilter) {\n    let filterStringMatchingRegex, numericFilterMatches;\n    let fieldName, operator, fieldValue;\n\n    // The following is helpful when the facetName has special characters like > and the default regex fails to parse it properly.\n    // So we ask users to pass in facetable fields in `facetableFieldsWithSpecialCharactersWithSpecialCharacters` when instantiating the adapter, so we can explicitly match against that.\n    if (this.configuration.facetableFieldsWithSpecialCharacters?.length > 0) {\n      // escape any Regex special characters, source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping\n      const sanitizedFacetableFieldsWithSpecialCharacters = this.configuration.facetableFieldsWithSpecialCharacters.map(\n        (f) => f.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"),\n      );\n      filterStringMatchingRegex = new RegExp(\n        `^(${sanitizedFacetableFieldsWithSpecialCharacters.join(\"|\")})(<=|>=|>|<|=)(.*)$`,\n      );\n\n      numericFilterMatches = numericFilter.match(filterStringMatchingRegex);\n\n      if (numericFilterMatches != null) {\n        // If no matches are found or if the above didn't trigger, fall back to the default regex\n        [, fieldName, operator, fieldValue] = numericFilterMatches;\n        return {\n          fieldName,\n          operator,\n          fieldValue,\n        };\n      }\n    }\n\n    // If we haven't found any matches yet, fall back to the default regex\n    filterStringMatchingRegex = this.constructor.DEFAULT_NUMERIC_FILTER_STRING_MATCHING_REGEX;\n    numericFilterMatches = numericFilter.match(filterStringMatchingRegex);\n\n    // console.log(filterStringMatchingRegex);\n    // console.log(numericFilter);\n    // console.log(numericFilterMatches);\n\n    if (numericFilterMatches == null) {\n      console.error(\n        `[Typesense-Instantsearch-Adapter] Parsing failed for a numeric filter \\`${numericFilter}\\` with the Regex \\`${filterStringMatchingRegex}\\`. If you have field names with special characters, be sure to add them to a parameter called \\`facetableFieldsWithSpecialCharacters\\` when instantiating the adapter.`,\n      );\n    } else {\n      [, fieldName, operator, fieldValue] = numericFilterMatches;\n    }\n\n    return {\n      fieldName,\n      operator,\n      fieldValue,\n    };\n  }\n\n  _adaptGeoFilter({ insideBoundingBox, aroundRadius, aroundLatLng, insidePolygon }) {\n    // Give this parameter first priority if it exists, since\n    if (insideBoundingBox) {\n      let x1, y1, x2, y2;\n      if (Array.isArray(insideBoundingBox)) {\n        [x1, y1, x2, y2] = insideBoundingBox.flat();\n      } else {\n        [x1, y1, x2, y2] = insideBoundingBox.split(\",\");\n      }\n      return `${this.configuration.geoLocationField}:(${x1}, ${y1}, ${x1}, ${y2}, ${x2}, ${y2}, ${x2}, ${y1})`;\n    }\n\n    if (aroundLatLng || aroundRadius) {\n      if (!aroundRadius || aroundRadius === \"all\") {\n        throw new Error(\n          \"[Typesense-Instantsearch-Adapter] In Typesense, geo-filtering around a lat/lng also requires a numerical radius. \" +\n            \"So the `aroundRadius` parameter is required when `aroundLatLng` is used. \" +\n            \"If you intend to just geo-sort around a lat/long, you want to use the sortBy InstantSearch widget (or a virtual sortBy custom widget).\",\n        );\n      }\n      const adaptedAroundRadius = `${parseFloat(aroundRadius) / 1000} km`; // aroundRadius is in meters\n      return `${this.configuration.geoLocationField}:(${aroundLatLng}, ${adaptedAroundRadius})`;\n    }\n\n    if (insidePolygon) {\n      let coordinates = insidePolygon;\n      if (Array.isArray(insidePolygon)) {\n        coordinates = insidePolygon.flat().join(\",\");\n      }\n      return `${this.configuration.geoLocationField}:(${coordinates})`;\n    }\n  }\n\n  _adaptFilters(instantsearchParams, collectionName) {\n    const adaptedFilters = [];\n\n    // `filters` can be used with the `Configure` widget\n    // However the format needs to be in the Typesense filter_by format, instead of Algolia filter format.\n    if (instantsearchParams.filters) {\n      adaptedFilters.push(instantsearchParams.filters);\n    }\n    adaptedFilters.push(this._adaptFacetFilters(instantsearchParams.facetFilters, collectionName));\n    adaptedFilters.push(this._adaptNumericFilters(instantsearchParams.numericFilters));\n    adaptedFilters.push(this._adaptGeoFilter(instantsearchParams));\n\n    return adaptedFilters.filter((filter) => filter && filter !== \"\").join(\" && \");\n  }\n\n  _adaptIndexName(indexName) {\n    return indexName.match(this.constructor.INDEX_NAME_MATCHING_REGEX)[1];\n  }\n\n  _adaptSortBy(indexName) {\n    return indexName.match(this.constructor.INDEX_NAME_MATCHING_REGEX)[3];\n  }\n\n  _adaptFacetBy(facets, collectionName) {\n    return [facets]\n      .flat()\n      .map((facet) => {\n        if (this.configuration.collectionSpecificFacetByOptions?.[collectionName]?.[facet]) {\n          return `${facet}${this.configuration.collectionSpecificFacetByOptions[collectionName][facet]}`;\n        } else if (this.configuration.facetByOptions[facet]) {\n          return `${facet}${this.configuration.facetByOptions[facet]}`;\n        } else {\n          return facet;\n        }\n      })\n      .join(\",\");\n  }\n\n  _adaptRulesContextsToOverrideTags(ruleContexts) {\n    return ruleContexts.join(\",\");\n  }\n\n  _buildSearchParameters(instantsearchRequest) {\n    const params = instantsearchRequest.params;\n    const indexName = instantsearchRequest.indexName;\n    const adaptedCollectionName = this._adaptIndexName(indexName);\n\n    // Convert all common parameters to snake case\n    const snakeCasedAdditionalSearchParameters = {};\n    for (const [key, value] of Object.entries(this.additionalSearchParameters)) {\n      snakeCasedAdditionalSearchParameters[this._camelToSnakeCase(key)] = value;\n    }\n\n    // Override, collection specific parameters\n    if (this.collectionSpecificSearchParameters[adaptedCollectionName]) {\n      for (const [key, value] of Object.entries(this.collectionSpecificSearchParameters[adaptedCollectionName])) {\n        snakeCasedAdditionalSearchParameters[this._camelToSnakeCase(key)] = value;\n      }\n    }\n\n    const typesenseSearchParams = Object.assign({}, snakeCasedAdditionalSearchParameters);\n\n    const adaptedSortBy = this._adaptSortBy(indexName);\n\n    Object.assign(typesenseSearchParams, {\n      collection: adaptedCollectionName,\n      q: params.query === \"\" || params.query === undefined ? \"*\" : params.query,\n      facet_by:\n        snakeCasedAdditionalSearchParameters.facet_by || this._adaptFacetBy(params.facets, adaptedCollectionName),\n      filter_by: this._adaptFilters(params, adaptedCollectionName) || snakeCasedAdditionalSearchParameters.filter_by,\n      sort_by: adaptedSortBy || snakeCasedAdditionalSearchParameters.sort_by,\n      max_facet_values: params.maxValuesPerFacet,\n      page: (params.page || 0) + 1,\n    });\n\n    if (params.hitsPerPage != null) {\n      typesenseSearchParams.per_page = params.hitsPerPage;\n    }\n\n    if (params.facetQuery) {\n      typesenseSearchParams.facet_query = `${params.facetName}:${params.facetQuery}`;\n      typesenseSearchParams.per_page = 0;\n    }\n\n    if (params.ruleContexts && params.ruleContexts.length > 0) {\n      typesenseSearchParams.override_tags = this._adaptRulesContextsToOverrideTags(params.ruleContexts);\n    }\n\n    // If a custom vector query is specified, set q=*\n    if (params.typesenseVectorQuery) {\n      typesenseSearchParams.vector_query = params.typesenseVectorQuery;\n    }\n\n    // Allow for conditional disabling of overrides, for particular sort orders\n    let sortByOption =\n      this.configuration.collectionSpecificSortByOptions?.[adaptedCollectionName]?.[typesenseSearchParams[\"sort_by\"]] ||\n      this.configuration.sortByOptions?.[typesenseSearchParams[\"sort_by\"]];\n    if (sortByOption?.[\"enable_overrides\"] != null) {\n      typesenseSearchParams[\"enable_overrides\"] = sortByOption[\"enable_overrides\"];\n    }\n\n    // console.log(params);\n    // console.log(typesenseSearchParams);\n\n    // Filter out empty or null values, so we don't accidentally override values set in presets\n    // eslint-disable-next-line no-unused-vars\n    return Object.fromEntries(Object.entries(typesenseSearchParams).filter(([_, v]) => v != null && v !== \"\"));\n  }\n\n  _camelToSnakeCase(str) {\n    return str\n      .split(/(?=[A-Z])/)\n      .join(\"_\")\n      .toLowerCase();\n  }\n\n  async request() {\n    // console.log(this.instantsearchRequests);\n\n    let searches = this.instantsearchRequests.map((instantsearchRequest) =>\n      this._buildSearchParameters(instantsearchRequest),\n    );\n\n    // If this is a conversational search, then move conversation related params to query params\n    let commonParams = {};\n    if (searches[0]?.conversation === true || searches[0]?.conversation === \"true\") {\n      const { q, conversation, conversation_id, conversation_model_id } = searches[0];\n      commonParams = { q, conversation, conversation_id, conversation_model_id };\n\n      searches = searches.map((searchParams) => {\n        // eslint-disable-next-line no-unused-vars\n        const { q, conversation, conversation_id, conversation_model_id, ...modifiedSearchParams } = searchParams;\n        return modifiedSearchParams;\n      });\n    }\n\n    const searchRequest = { searches: searches };\n\n    // Add union parameter if configured\n    if (this.configuration.union) {\n      searchRequest.union = this.configuration.union;\n      commonParams.page = searches[0].page;\n    }\n\n    return this.typesenseClient.multiSearch.perform(searchRequest, commonParams);\n  }\n}\n"],"mappings":"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","ignoreList":[]}